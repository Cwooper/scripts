#!/bin/bash

<<comment
Add the following to ~/.config/fish/completions/blz.fish
For automatic fish completions:

# Helper function to find BLZ files
function __blz_find_files
    for f in *
        if test -f $f
            and head -c 4 $f 2>/dev/null | grep -q BLZ
            and not head -c 4 $f 2>/dev/null | grep -q BLZd
            echo $f | sed 's/\.[^.]*\$//g'
        end
    end | sort -u
end

# Helper function to find .s files
function __blz_find_s_files
    set -l files (find . -maxdepth 1 -name "*.s" -type f 2>/dev/null)
    if test (count $files) -gt 0
        string replace -r '^\./' '' $files | string replace -r '\.s$' ''
    end
end

# Basic command completion (only shown when no subcommand is present)
complete -c blz -f -n "not __fish_seen_subcommand_from run build clean" -a "run" -d "Build, run, and clean the specified file"
complete -c blz -f -n "not __fish_seen_subcommand_from run build clean" -a "build" -d "Only build the specified file"
complete -c blz -f -n "not __fish_seen_subcommand_from run build clean" -a "clean" -d "Clean BLZ files"

# For run and build commands, suggest .s files without extension
complete -c blz -n "__fish_seen_subcommand_from run build" -a "(__blz_find_s_files)" -f

# For clean command, suggest unique base names of BLZ files (except BLZd)
complete -c blz -n "__fish_seen_subcommand_from clean" -a "(__blz_find_files)" -f

comment

# Function to print usage
print_usage() {
    echo "Usage: blz <command> <file>"
    echo "Commands:"
    echo "  run   - Build, run, and clean the specified file"
    echo "  build - Only build the specified file"
    echo "  clean - Clean all BLZ* files (except DISK) or specific file's BLZ* files"
    exit 1
}

# Function to check if a file exists
check_file() {
    local base=$1
    if [[ -z $(find . -maxdepth 1 -type f -iname "${base}.*") ]]; then
        echo "Error: No files matching ${base}.* found"
        exit 1
    fi
}

# Function to find actual filename with case-insensitive match
get_actual_filename() {
    local pattern=$1
    find . -maxdepth 1 -type f -iname "${pattern}.*" -printf "%f\n" | head -n 1 | sed 's/\.[^.]*$//'
}

# Function to build a file
build_file() {
    local search_name=$1
    local base=$(get_actual_filename "$search_name")
    local needs_runtime=false
    
    # Check if we need Runtime.o and System.o
    if [[ -f "$base.k" ]] && grep -q "import System" "$base.k" 2>/dev/null; then
        needs_runtime=true
    fi
    
    # If .k file exists, compile it to .s
    if [[ -f "$base.k" ]]; then
        kpl "$base" >/dev/null 2>&1 || exit 1
    fi
    
    # Assemble .s to .o
    asm "$base.s" >/dev/null 2>&1 || exit 1
    
    # Link the object files
    if [ "$needs_runtime" = true ]; then
        if [[ ! -f "Runtime.o" ]]; then
            asm Runtime.s >/dev/null 2>&1 || exit 1
        fi
        if [[ ! -f "System.o" ]]; then
            kpl System -unsafe >/dev/null 2>&1 || exit 1
            asm System.s >/dev/null 2>&1 || exit 1
        fi
        lddd Runtime.o System.o "$base.o" -o "$base" >/dev/null 2>&1 || exit 1
    else
        lddd "$base.o" -o "$base" >/dev/null 2>&1 || exit 1
    fi
    
    echo "$base"
}

# Function to clean BLZ* files
clean_files() {
    local base=$1
    if [ -z "$base" ]; then
        for file in *; do
            if [ -f "$file" ]; then
                if head -c 4 "$file" 2>/dev/null | grep -q "BLZ" && ! head -c 4 "$file" 2>/dev/null | grep -q "BLZd"; then
                    rm -f "$file" 2>/dev/null
                fi
            fi
        done
    else
        base=$(get_actual_filename "$base")
        for file in "$base" "$base.o"; do
            if [ -f "$file" ]; then
                if head -c 4 "$file" 2>/dev/null | grep -q "BLZ" && ! head -c 4 "$file" 2>/dev/null | grep -q "BLZd"; then
                    rm -f "$file" 2>/dev/null
                fi
            fi
        done
    fi
}

# Main script
if [[ $# -lt 1 ]]; then
    print_usage
fi

command=$1
file=${2%.*}  # Remove extension if present

case "$command" in
    "run")
        [ -z "$file" ] && print_usage
        check_file "$file"
        actual_name=$(build_file "$file")
        blitz -g "$actual_name"
        clean_files "$actual_name"
        ;;
    "build")
        [ -z "$file" ] && print_usage
        check_file "$file"
        build_file "$file" >/dev/null
        ;;
    "clean")
        clean_files "$file"
        ;;
    *)
        echo "Error: Unknown command '$command'"
        print_usage
        ;;
esac
